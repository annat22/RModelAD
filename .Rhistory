update.packages(checkBuilt=TRUE)
install.packages(c("ade4", "ape", "arrow", "bbmle", "bdsmatrix", "bestNormalize", "bibtex", "BiocManager", "bit", "biwt", "blob", "bookdown", "boot", "brew", "broom", "bslib", "butcher", "Cairo", "callr", "car", "carData", "caret", "checkmate", "circlize", "cli", "clipr", "clue", "clustermq", "colorRamps", "colorspace", "colourpicker", "commonmark", "conquer", "covr", "cpp11", "crayon", "curl", "data.table", "DBI", "dbplyr", "dendextend", "DEoptimR", "desc", "deSolve", "details", "devtools", "digest", "doMC", "doParallel", "doRNG", "dplyr", "DT", "dtplyr", "e1071", "ellipse", "emmeans", "estimability", "evaluate", "FactoInvestigate", "FactoMineR", "fansi", "farver", "filesstrings", "fitdistrplus", "flexmix", "FNN", "fontawesome", "forcats", "foreach", "foreign", "formatR", "FSA", "future", "future.apply", "gargle", "gdata", "gdtools", "generics", "geometry", "gert", "ggforce", "ggfortify", "ggplot2", "ggpubr", "ggraph", "ggrepel", "ggridges", "ggsignif", "gh", "git2r", "gitcreds", "globals", "glue", "googlesheets4", "gower", "gplots", "graphlayouts", "greta", "gtable", "gtools", "haven", "highr", "Hmisc", "hms", "htmlTable", "htmltools", "htmlwidgets", "httpuv", "httr", "hunspell", "ica", "idr", "igraph", "ipred", "irlba", "isoband", "iterators", "jpeg", "jsonlite", "keras", "kernlab", "keyring", "knitr", "LambertW", "lamW", "latticeExtra", "lava", "leiden", "lifecycle", "linprog", "listenv", "lme4", "lmtest", "lobstr", "locfit", "lpSolve", "lubridate", "magic", "magrittr", "maptools", "markdown", "mathjaxr", "Matrix", "MatrixModels", "matrixStats", "mclust", "metap", "mice", "minqa", "mixtools", "mnormt", "modelr", "multcomp", "narray", "NbClust", "nlme", "nloptr", "ontologyIndex", "openssl", "openxlsx", "ore", "oro.nifti", "packrat", "parallelly", "patchwork", "pbapply", "pbdZMQ", "pcaPP", "permute", "pillar", "pingr", "pins", "pkgbuild", "pkgload", "pkgmaker", "plotly", "plyr", "png", "polyclip", "polynom", "pracma", "processx", "progressr", "proxy", "ps", "purrr", "quantreg", "R.methodsS3", "R.oo", "R.utils", "rbibutils", "RColorBrewer", "Rcpp", "RcppAnnoy", "RcppArmadillo", "RcppEigen", "RcppParallel", "RcppThread", "RCurl", "Rdpack", "readr", "readxl", "recipes", "renv", "reprex", "reshape", "reticulate", "rjson", "rlang", "rmarkdown", "RNifti", "robust", "robustbase", "roxygen2", "rprojroot", "rrcov", "rsconnect", "RSpectra", "RSQLite", "rstatix", "rstudioapi", "rticles", "Rtsne", "rversions", "rvest", "sandwich", "sass", "scales", "scattermore", "scatterplot3d", "scico", "sctransform", "segmented", "seqinr", "Seurat", "SeuratObject", "shiny", "shinyjqui", "shinyWidgets", "showtext", "sn", "sodium", "sp", "spatstat", "spatstat.data", "spatstat.geom", "spatstat.linnet", "spatstat.sparse", "spatstat.utils", "statmod", "strex", "stringi", "stringr", "survival", "svglite", "sys", "sysfonts", "systemfonts", "tensorflow", "testthat", "TFMPvalue", "tfruns", "TH.data", "tibble", "tidygraph", "tidyr", "tidyselect", "tidytree", "tidyverse", "timeDate", "tinytex", "tsne", "tweenr", "tzdb", "umap", "usethis", "uuid", "uwot", "vcd", "vctrs", "vegan", "VennDiagram", "viridisLite", "vroom", "waiter", "waldo", "webshot", "WGCNA", "whisker", "withr", "xfun", "XML", "xts", "yaml", "yulab.utils", "zip", "zoo"))
install.packages(c("boot", "foreign", "httpuv", "Matrix", "nlme", "survival"))
install.packages("httpuv")
install.packages("tidyverse")
install.packages("abind")
library(tidyverse)
install.packages("ape")
install.packages("ade4")
install.packages("askpass")
install.packages("BiocManager")
install.packages("bookdown")
install.packages("devtools")
install.packages("keyring")
install.packages("kableExtra")
install.packages("vcd")
knitr::opts_knit$set(root.dir = ".")
knitr::opts_chunk$set(message=FALSE, warning=FALSE, error=FALSE, cache=TRUE)
source("https://raw.github.com/TheJacksonLaboratory/ClimbR/master/climbGET.R")
edit(climbGET())
View(climbGET)
climbRequest("GET", "api/vocabulary")
climbRequest("GET", "api/vocabulary")
climbRequest("GET", "api/vocabulary/taxon")
knitr::opts_knit$set(root.dir = ".")
knitr::opts_chunk$set(message=FALSE, warning=FALSE, error=FALSE, cache = FALSE, eval=FALSE)
library(synapser)
library(tidyverse)
source("https://raw.github.com/TheJacksonLaboratory/ClimbR/master/climbGET.R")
## 1.
synLogin(silent=TRUE)
## 2.
myfolder <- Folder("Annat", parent = "syn51729609") # change to your folder name
myfolder <- synStore(myfolder)
## 3.
ff.id <- synFindEntityId("fastqfiles_key.csv", parent = "syn26195243")
## 3. Read fastqfiles_key.csv
key_rna <- synFindEntityId("fastqfiles_key.csv", parent = "syn26195243") %>%
synGet(downloadLocation=".", ifcollision="overwrite.local") %>%
pluck("path") %>%
read_csv(col_types = cols(.default = "c"))
## 4. get animal metadata from climb
## 4a.
ind_c <- climbGET(queryValues=unique(key_rna$animalName), facet="animals", queryField="animalName")
View(key_rna)
## 3. Read fastqfiles_key.csv
key_rna <- synFindEntityId("fastqfiles_key.csv", parent = "syn51664269") %>%
synGet(downloadLocation=".", ifcollision="overwrite.local") %>%
pluck("path") %>%
read_csv(col_types = cols(.default = "c"))
View(key_rna)
## 4. get animal metadata from climb
## 4a. pull animal information from animals facet
ind_c <- climbGET(queryValues=unique(key_rna$animalName), facet="animals", queryField="animalName")
## 4b. pull genotypes from climb based on AnimalID (animal climb ID; genotype can't be pulled by animal name):
gt_c <- climbGET(ind_c$animalId, "genotypes", "animalId")
View(ind_c)
View(gt_c)
meta <- ind_c %>%
left_join(gt_c, by="animalName")
View(meta)
## 4. get animal metadata from climb
## 4a. pull animal information from animals facet
ind_c <- climbGET(queryValues=unique(key_rna$animalName), facet="animals", queryField="animalName") %>%
select(animalName, sex, diet, dateBorn, dateExit, line, climbID,)
## 4. get animal metadata from climb
## 4a. pull animal information from animals facet
ind_c <- climbGET(queryValues=unique(key_rna$animalName), facet="animals", queryField="animalName") %>%
select(animalName, sex, diet, dateBorn, dateExit, line, animalID)
## 4. get animal metadata from climb
## 4a. pull animal information from animals facet
ind_c <- climbGET(queryValues=unique(key_rna$animalName), facet="animals", queryField="animalName") %>%
select(animalName, sex, diet, dateBorn, dateExit, line, animalId)
View(ind_c)
## 4b. pull genotypes from climb based on AnimalID (animal climb ID; genotype can't be pulled by animal name):
gt_c <- climbGET(ind_c$animalId, "genotypes", "animalId")
gt_c <- gt_c %>% select(genotype)
View(gt_c)
## 4b. pull genotypes from climb based on AnimalID (animal climb ID; genotype can't be pulled by animal name):
gt_c <- climbGET(ind_c$animalId, "genotypes", "animalId")
gt_c <- gt_c %>% select(animalName, animalId, genotype)
View(gt_c)
gt_c <- gt_c %>% select(animalId, genotype)
View(gt_c)
meta <- ind_c %>%
left_join(gt_c, by="animalName")
meta <- ind_c %>%
left_join(gt_c, by="animalId")
View(meta)
## 5. store with provenance
# find id of this script
html <- synFindEntityId("climb2portal_getStarted.html", parent = "syn51729612")
# 4c. merge genotypes with individual metadata:
meta <- ind_c %>%
left_join(gt_c, by="animalId") %>%
# calculate age from dateBorn and dateExit
mutate(age_d = difftime(lubridate::ymd_hms(dateExit),
lubridate::ymd_hms(dateBorn),
units = "days"), .keep="unused") %>%
mutate(age_d = round(age_d),
age_m = round(as.double(age_d)/30)) %>%
write_csv(file="metadata.csv")
metafile <- File(path = "metadata.csv", parent = myFolder)
## 2. create your own folder in the retreat folder
myfolder <- Folder("Annat", parent = "syn51729612") # change to your folder name
myfolder <- synStore(myfolder)
metafile <- File(path = "metadata.csv", parent = myFolder)
## 2. create your own folder in the retreat folder
myFolder <- Folder("Annat", parent = "syn51729612") # change to your folder name
myFolder <- synStore(myfolder)
metafile <- File(path = "metadata.csv", parent = myFolder)
## 3. Read fastqfiles_key.csv
key_rna.id <- synFindEntityId("fastqfiles_key.csv", parent = "syn51664269")
key_rna <- synGet(key_rna.id, downloadLocation=".", ifcollision="overwrite.local") %>%
pluck("path") %>%
read_csv(col_types = cols(.default = "c"))
## 5. store with provenance
# find id of this script
html <- synFindEntityId("climb2portal_getStarted.html", parent = "syn51729612")
metafile <- File(path = "metadata.csv", parent = myFolder)
metafile <- synStore(metafile, used= key_rna.id, executed = html)
file.edit("~/.Renviron")
setwd("~/Dropbox (JAX)/MODEL-AD/RModelAD")
knitr::opts_knit$set(root.dir = ".")
knitr::opts_chunk$set(message=FALSE, warning=FALSE, error=FALSE, cache = FALSE, eval=FALSE)
## 1. log into synapse
synLogin(silent=TRUE)
library(synapser)
library(tidyverse)
source("https://raw.github.com/TheJacksonLaboratory/ClimbR/master/climbGET.R")
## 1. log into synapse
synLogin(silent=TRUE)
## 2. create your own folder in the retreat folder
myFolder <- Folder("Annat", parent = "syn51729612") # change to your folder name
myFolder <- synStore(myfolder)
## 2. create your own folder in the retreat folder
myFolder <- Folder("Annat", parent = "syn51729612") # change to your folder name
library(synapser)
library(tidyverse)
source("https://raw.github.com/TheJacksonLaboratory/ClimbR/master/climbGET.R")
## 1. log into synapse
synLogin(silent=TRUE)
## 2. create your own folder in the retreat folder
myFolder <- Folder("Annat", parent = "syn51729612") # change to your folder name
myFolder <- synStore(myfolder)
library(synapser)
library(tidyverse)
source("https://raw.github.com/TheJacksonLaboratory/ClimbR/master/climbGET.R")
## 1. log into synapse
synLogin(silent=TRUE)
## 2. create your own folder in the retreat folder
myFolder <- Folder("Annat", parent = "syn51729612") # change to your folder name
myFolder <- synStore(myfolder)
## 2. create your own folder in the retreat folder
myFolder <- Folder("Annat", parent = "syn51729612") # change to your folder name
myFolder <- synStore(myfolder)
myFolder <- synStore(myFolder)
## 3. Read fastqfiles_key.csv
key_rna.id <- synFindEntityId("fastqfiles_key.csv", parent = "syn51664269")
key_rna <- synGet(key_rna.id, downloadLocation=".", ifcollision="overwrite.local") %>%
pluck("path") %>%
read_csv(col_types = cols(.default = "c"))
## 4. get animal metadata from climb
## 4a. pull animal information from animals facet
ind_c <- climbGET(queryValues=unique(key_rna$animalName), facet="animals", queryField="animalName")
ind_c <- ind_c %>%
select(animalName, sex, diet, dateBorn, dateExit, line, animalId)
## 4b. pull genotypes from climb based on AnimalID (animal climb ID; genotype can't be pulled by animal name):
gt_c <- climbGET(ind_c$animalId, "genotypes", "animalId")
gt_c <- gt_c %>% select(animalId, genotype)
# 4c. merge genotypes with individual metadata:
meta <- ind_c %>%
left_join(gt_c, by="animalId") %>%
# calculate age from dateBorn and dateExit
mutate(age_d = difftime(lubridate::ymd_hms(dateExit),
lubridate::ymd_hms(dateBorn),
units = "days"), .keep="unused") %>%
mutate(age_d = round(age_d),
age_m = round(as.double(age_d)/30)) %>%
write_csv(file="metadata.csv")
knitr::opts_knit$set(root.dir = ".")
knitr::opts_chunk$set(message=FALSE, warning=FALSE, error=FALSE, cache = FALSE)
source("https://raw.github.com/annat22/RModelAD/master/gen_manifest.R")
source("https://raw.github.com/annat22/RModelAD/master/gen_ind_meta.R")
climbGET(c("1"), facet="clinicals", "AnimalId")
x <- climbGET(c("1"), facet="clinicals", "AnimalId")
View(x)
x <- climbGET(c("315"), facet="clinicalObservations", "MaterialKey")
